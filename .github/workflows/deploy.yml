name: 'Deploy Wasp to Caprover'

on:
  workflow_call:
    inputs:
      caprover-server:
        description: 'Caprover server URL'
        type: string
        required: true
      caprover-server-app-name:
        description: 'Caprover server app name'
        type: string
        required: true
      caprover-server-app-token:
        description: 'Caprover server app token'
        type: string
        required: true
      caprover-client-app-name:
        description: 'Caprover client app name'
        type: string
        required: true
      caprover-client-app-token:
        description: 'Caprover client app token'
        type: string
        required: true
      server-image-name:
        description: 'Name of the server image'
        type: string
        default: ${{ inputs.docker-registry }}/${{ inputs.caprover-server-app-name }}
      client-image-name:
        description: 'Name of the client image'
        type: string
        default: ${{ inputs.docker-registry }}/${{ inputs.caprover-client-app-name }}
      server-app-url:
        description: 'URL of the server app'
        type: string
        required: true
      docker-registry:
        description: 'Docker registry'
        type: string
        default: 'ghcr.io'
      docker-registry-username:
        description: 'Docker registry username'
        type: string
        default: ${{ github.actor }}
      docker-registry-password:
        description: 'Docker registry password'
        type: string
        default: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    outputs:
      server-image-tag: ${{ steps.meta-server.outputs.tags }}
      client-image-tag: ${{ steps.meta-client.outputs.tags }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ inputs.docker-registry-username }}
          password: ${{ inputs.docker-registry-password }}

      - name: (server) Extract metadata
        id: meta-server
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ inputs.server-image-name  }}
    
      - name: (client) Extract metadata (tags, labels) for Docker
        id: meta-client
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ inputs.client-image-name  }}

      - name: Install Wasp
        shell: bash
        run: curl -sSL https://get.wasp-lang.dev/installer.sh | sh

      # TODO: maybe introduce caching of the built app or npm packages https://github.com/actions/setup-node#caching-global-packages-data

      - name: Build Wasp app
        shell: bash
        run: wasp build

      - name: (client) Build
        shell: bash
        run: |
          cd ./.wasp/build/web-app
          REACT_APP_API_URL=${{ inputs.server-app-url }} npm run build

      - name: (client) Prepare the Dockerfile
        shell: bash
        run: |
          cd ./.wasp/build/web-app
          echo "FROM pierrezemb/gostatic" > Dockerfile
          echo "CMD [\"-fallback\", \"index.html\", \"-enable-logging\"]" >> Dockerfile
          echo "COPY ./build /srv/http" >> Dockerfile

      - name: (server) Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./.wasp/build
          file: ./.wasp/build/Dockerfile
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}

      - name: (client) Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./.wasp/build/web-app
          file: ./.wasp/build/web-app/Dockerfile
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-images
    steps:
      - name: (server) Deploy to Caprover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: ${{ inputs.caprover-server }}
          app: ${{ inputs.caprover-server-app-name }}
          token: ${{ inputs.caprover-server-app-token }}
          image: ${{ needs.build-and-push-images.outputs.server-image-tag }}

      - name: (client) Deploy to Caprover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: ${{ inputs.caprover-server }}
          app: ${{ inputs.caprover-client-app-name }}
          token: ${{ inputs.caprover-client-app-token }}
          image: ${{ needs.build-and-push-images.outputs.client-image-tag }}